service: import-service
frameworkVersion: '2'

useDotenv: true

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: eu-west-1
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action: "s3:*"
          Resource: "arn:aws:s3:::shop-import-service-bucket/*"
        - Effect: Allow
          Action: "sqs:*"
          Resource:
            - Fn::GetAtt:
              - catalogItemsQueue
              - Arn
        - Effect: Allow
          Action: "sqs:*"
          Resource:
            - Fn::GetAtt:
              - deadLetterQueue
              - Arn
        - Effect: "Allow"
          Action: "sns:*"
          Resource: ${env:SNS_ARN}

  environment:
    PG_HOST: ${env:PG_HOST}
    PG_PORT: ${env:PG_PORT}
    PG_DBNAME: ${env:PG_DBNAME}
    PG_USERNAME: ${env:PG_USERNAME}
    PG_PASSWORD: ${env:PG_PASSWORD}
    SQS_URL: ${env:SQS_URL}
    DLQ_URL: ${env:DLQ_URL}
    SNS_ARN: ${env:SNS_ARN}
    EMAIL_LIST: ${env:EMAIL_LIST}
    AUTHORIZER_ARN: ${env:AUTHORIZER_ARN}

plugins:
  - serverless-webpack

resources:
  Resources:
    catalogItemsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "catalogItemsQueue"
        RedrivePolicy:
          deadLetterTargetArn:
            "Fn::GetAtt":
              - deadLetterQueue
              - Arn
          maxReceiveCount: 1
    deadLetterQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "deadLetterQueue"

    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic

    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: ${env:EMAIL_LIST}
        TopicArn:
          Ref: createProductTopic

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

functions:
  importProductsFile:
    handler: handler.importProductsFile
    events:
      - http:
          path: import
          method: get
          authorizer:
            arn: ${env:AUTHORIZER_ARN}
            managedExternally: false
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
          cors: true
          request:
            parameters:
              querystrings:
                name: true

  importFileParser:
    handler: handler.importFileParser
    events:
      - s3:
          bucket: shop-import-service-bucket
          existing: true
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
            - suffix: .csv

  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn
